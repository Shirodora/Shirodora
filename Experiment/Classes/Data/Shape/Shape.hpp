//
//  Shape.hpp
//  Experiment
//
//  Created by Ryoutarou Onimura on 2016/06/15.
//
//

#ifndef Shape_hpp
#define Shape_hpp

#include <stdio.h>

//=========================================================================
// 追加のインクルードはここから
//=========================================================================
#include "Constants.h"

//=========================================================================
//
// 線分クラス
//
//=========================================================================
class CLine {
    //=========================================================================
    // メンバ変数
    //=========================================================================
public :
    cocos2d::Vec2 m_point[2] ;
    cocos2d::Vec2 m_nVec ;
    float m_length = 0.0f ;
    
    //=========================================================================
    // コンストラクタ/デストラクタ
    //=========================================================================
public :
    /**
     *  @desc   コンストラクタ
     */
    CLine() ;
    
    /**
     *  @desc   コンストラクタ
     */
    CLine(const cocos2d::Vec2 &startPoint, const cocos2d::Vec2 &endPoint) ;
    
    /**
     *  @desc   デストラクタ
     */
    ~CLine() ;
    
    //=========================================================================
    // set
    //=========================================================================
    /**
     *  @desc   set
     *  @param  始点座標
     *  @param  終点座標
     */
    void set(const cocos2d::Vec2 &startPoint, const cocos2d::Vec2 &endPoint) ;
    
    //=========================================================================
    // get
    //=========================================================================
    // メンバ変数は public なので特になし
    
    //=========================================================================
    // メンバ関数
    //=========================================================================
public :
    /**
     *  @desc   点と線分上での最近点を求める
     *  @param  対象の点
     *  @return 最近点座標
     */
    cocos2d::Vec2 getRecentlyPosition(const cocos2d::Vec2 &point) const ;
    
    /**
     *  @desc   点と線分上での最近点を求める
     *  @param  対象の点
     *  @return 最近点座標
     *  @tips   直線上ではなく、線分上という限られた長さであることに注意
     */
    cocos2d::Vec2 getRecentlyPositionInLine(const cocos2d::Vec2 &point) const ;
    
    /**
     *  @desc   指定された座標がベクトルの内外どちらにあるか
     *  @return 1...外 -1...内 0...線上
     */
    int getInOrOut(const cocos2d::Vec2 &point) const ;
    
    /**
     *  @desc   線上に点が含まれているか
     *  @return true...含まれている false...含まれていない
     */
    bool isContaintsPoint(const cocos2d::Vec2 &point) const ;
    
};

//=========================================================================
//
// 単体クラス(各次元での最小形状)
//
//=========================================================================
class CSimplex {
    //=========================================================================
    // メンバ変数
    //=========================================================================
private :
    const int ARRAY_SIZE = 3 ;
    
    bool m_isFull = false ;
    bool m_isEmpty = true ;
    // 現在格納できる配列の最後尾添字番号
    int m_currentIndex = 0 ;
    
    // 頂点座標配列
    cocos2d::Vec2 *m_apexs[3] {NULL} ;
    
    //=========================================================================
    // コンストラクタ/デストラクタ
    //=========================================================================
public :
    /**
     *  @desc   コンストラクタ
     */
    CSimplex() ;
    
    /**
     *  @desc   デストラクタ
     */
    ~CSimplex() ;
    
    //=========================================================================
    // set
    //=========================================================================
public :
    /**
     *  @desc   頂点を追加する
     *  @param  追加する頂点座標
     */
    void add(const cocos2d::Vec2 &apex) ;
    
private :
    /**
     *  @desc   配列を詰める
     */
    void closeArray() ;
    
    /**
     *  @desc   添字番号を増やす
     */
    void addIndex() ;
    
    /**
     *  @desc   添字番号を減らす
     */
    void subIndex() ;
    
    
    //=========================================================================
    // get
    //=========================================================================
public :
    /**
     *  @desc   現在の配列サイズ取得
     *  @return 配列サイズ
     *  @tips   for文のお共にどうぞ
     */
    int getCurrentArraySize() const ;
    
    /**
     *  @desc   指定した添字の頂点座標取得
     *  @return 頂点座標
     */
    cocos2d::Vec2 getApexAt(int index) const ;
    
    /**
     *  @desc   最後尾添字番号取得
     *  @return 最後尾添字番号
     */
    int getLastIndex() const ;
    
    /**
     *  @desc   最後尾に格納されている頂点座標取得
     *  @return 頂点座標
     */
    cocos2d::Vec2 getLastApex() const ;
    
    /**
     *  @desc   配列がいっぱいかを返す
     *  @return true...いっぱい alse...いっぱいではない
     */
    bool isFull() const ;
    
    /**
     *  @desc   配列が空を返す
     *  @return true...いっぱい alse...いっぱいではない
     */
    bool isEmpty() const ;
    
    //=========================================================================
    // メンバ関数
    //=========================================================================
public :
    /**
     *  @desc   対象の点と単体での最近点を求める
     *  @param  対象の点座標
     *  @return 最近点
     */
    cocos2d::Vec2 getRecentlyPositionInSinplex(const cocos2d::Vec2 &point) const ;
    
    /**
     *  @desc   対象の点が単体内に含まれているかを調べる関数
     *  @param  対象の点座標
     *  @return true...含まれている, false...含まれていない
     */
    bool isContainsPoint(const cocos2d::Vec2 &point = cocos2d::Vec2::ZERO) const ;
    
};

#endif /* Shape_hpp */
